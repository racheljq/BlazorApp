@page "/login"

@layout EmptyLayout


@using BlazorAppLogin.Authentication
@using BlazorAppLogin.Data
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@inject IConfiguration iconfiguration

<div class="row">
    <a href="">&#10094; Back</a>
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border" style="width:400px">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div style="color:red;padding:5px">
            @errmsg
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
    @msg

</div>




@code {
    //https://www.youtube.com/watch?v=iq2btD9WufI


    public string errmsg ="" ;
    public string msg = "";
    private class Model {
        public string UserName{ get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();


    private async Task Authenticate(){
        errmsg = "";
        var userdb = new UserDB(iconfiguration);

        if (!userdb.pLogin(model.UserName, model.Password))
       {
            errmsg = "Invalid User Name or Password";
            return;
       }
       

        if (userdb.pRecordFind(0, model.UserName))
       {
            var customeAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customeAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserID = userdb.MyUserRecord.ID.ToString(),
                    UserName = userdb.MyUserRecord.Code,
                    Role = userdb.MyUserRecord.UserType
                });

            navManager.NavigateTo("/", true);
       }else{
            errmsg = "User not found";
            return;
       }
    }
}
